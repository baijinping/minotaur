// Code generated by minotaur-config-export. DO NOT EDIT.
package example

import (
	jsonIter "github.com/json-iterator/go"
	"github.com/kercylan98/minotaur/utils/log"
	"go.uber.org/zap"
	"os"
)

var json = jsonIter.ConfigCompatibleWithStandardLibrary
var full map[string]any
var (
	// IndexConfig 有索引
	IndexConfigSign = "IndexConfig"
	IndexConfig     map[int]map[string]*IndexConfigDefine
	_IndexConfig    map[int]map[string]*IndexConfigDefine
	// EasyConfig 无索引
	EasyConfigSign = "EasyConfig"
	EasyConfig     *EasyConfigDefine
	_EasyConfig    *EasyConfigDefine
)

func LoadConfig(handle func(filename string, config any) error) {
	var err error
	_IndexConfig = make(map[int]map[string]*IndexConfigDefine)
	if err = handle("IndexConfig.json", &_IndexConfig); err != nil {
		log.Err("Config", log.String("Name", "IndexConfig"), log.Bool("Invalid", true), log.Err(err))
	}

	_EasyConfig = new(EasyConfigDefine)
	if err = handle("EasyConfig.json", _EasyConfig); err != nil {
		log.Err("Config", log.String("Name", "EasyConfig"), log.Bool("Invalid", true), log.Err(err))
	}

}

// Refresh 将加载后的配置刷新到线上
func Refresh() {
	full = make(map[string]any)
	IndexConfig = _IndexConfig
	full["IndexConfig"] = IndexConfig
	EasyConfig = _EasyConfig
	full["EasyConfig"] = EasyConfig
}

// DefaultLoad 默认提供的配置加载函数
func DefaultLoad(filepath string) {
	LoadConfig(func(filename string, config any) error {
		bytes, err := os.ReadFile(filepath)
		if err != nil {
			return err
		}

		return json.Unmarshal(bytes, &config)
	})
}

// GetFull 获取所有配置的 map 集合
//   - 通常用于前端配置通过后端接口获取的情况
func GetFull() map[string]any {
	return full
}
